// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dmultinom
double dmultinom(NumericVector x, NumericVector prob);
RcppExport SEXP _ploidyverseClasses_dmultinom(SEXP xSEXP, SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(dmultinom(x, prob));
    return rcpp_result_gen;
END_RCPP
}
// dDirichletMultinom
double dDirichletMultinom(NumericVector x, NumericVector prob, double alpha);
RcppExport SEXP _ploidyverseClasses_dDirichletMultinom(SEXP xSEXP, SEXP probSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(dDirichletMultinom(x, prob, alpha));
    return rcpp_result_gen;
END_RCPP
}
// nGen
int nGen(int ploidy, int nalleles);
RcppExport SEXP _ploidyverseClasses_nGen(SEXP ploidySEXP, SEXP nallelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type nalleles(nallelesSEXP);
    rcpp_result_gen = Rcpp::wrap(nGen(ploidy, nalleles));
    return rcpp_result_gen;
END_RCPP
}
// enumerateGenotypes
IntegerMatrix enumerateGenotypes(int ploidy, int nalleles);
RcppExport SEXP _ploidyverseClasses_enumerateGenotypes(SEXP ploidySEXP, SEXP nallelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type nalleles(nallelesSEXP);
    rcpp_result_gen = Rcpp::wrap(enumerateGenotypes(ploidy, nalleles));
    return rcpp_result_gen;
END_RCPP
}
// indexGenotype
int indexGenotype(IntegerVector genotype);
RcppExport SEXP _ploidyverseClasses_indexGenotype(SEXP genotypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type genotype(genotypeSEXP);
    rcpp_result_gen = Rcpp::wrap(indexGenotype(genotype));
    return rcpp_result_gen;
END_RCPP
}
// genotypeFromIndex
IntegerVector genotypeFromIndex(int index, int ploidy);
RcppExport SEXP _ploidyverseClasses_genotypeFromIndex(SEXP indexSEXP, SEXP ploidySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    rcpp_result_gen = Rcpp::wrap(genotypeFromIndex(index, ploidy));
    return rcpp_result_gen;
END_RCPP
}
// alleleCopy
IntegerVector alleleCopy(IntegerVector genotype, int nalleles);
RcppExport SEXP _ploidyverseClasses_alleleCopy(SEXP genotypeSEXP, SEXP nallelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type genotype(genotypeSEXP);
    Rcpp::traits::input_parameter< int >::type nalleles(nallelesSEXP);
    rcpp_result_gen = Rcpp::wrap(alleleCopy(genotype, nalleles));
    return rcpp_result_gen;
END_RCPP
}
// makeGametes
IntegerMatrix makeGametes(IntegerVector genotype);
RcppExport SEXP _ploidyverseClasses_makeGametes(SEXP genotypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type genotype(genotypeSEXP);
    rcpp_result_gen = Rcpp::wrap(makeGametes(genotype));
    return rcpp_result_gen;
END_RCPP
}
// selfingMatrix
NumericMatrix selfingMatrix(int ploidy, int nalleles);
RcppExport SEXP _ploidyverseClasses_selfingMatrix(SEXP ploidySEXP, SEXP nallelesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type ploidy(ploidySEXP);
    Rcpp::traits::input_parameter< int >::type nalleles(nallelesSEXP);
    rcpp_result_gen = Rcpp::wrap(selfingMatrix(ploidy, nalleles));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ploidyverseClasses_dmultinom", (DL_FUNC) &_ploidyverseClasses_dmultinom, 2},
    {"_ploidyverseClasses_dDirichletMultinom", (DL_FUNC) &_ploidyverseClasses_dDirichletMultinom, 3},
    {"_ploidyverseClasses_nGen", (DL_FUNC) &_ploidyverseClasses_nGen, 2},
    {"_ploidyverseClasses_enumerateGenotypes", (DL_FUNC) &_ploidyverseClasses_enumerateGenotypes, 2},
    {"_ploidyverseClasses_indexGenotype", (DL_FUNC) &_ploidyverseClasses_indexGenotype, 1},
    {"_ploidyverseClasses_genotypeFromIndex", (DL_FUNC) &_ploidyverseClasses_genotypeFromIndex, 2},
    {"_ploidyverseClasses_alleleCopy", (DL_FUNC) &_ploidyverseClasses_alleleCopy, 2},
    {"_ploidyverseClasses_makeGametes", (DL_FUNC) &_ploidyverseClasses_makeGametes, 1},
    {"_ploidyverseClasses_selfingMatrix", (DL_FUNC) &_ploidyverseClasses_selfingMatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ploidyverseClasses(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
