// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_ploidyverseVcf_RCPPEXPORTS_H_GEN_
#define RCPP_ploidyverseVcf_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace ploidyverseVcf {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("ploidyverseVcf", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in ploidyverseVcf");
            }
        }
    }

    inline double dmultinom(NumericVector x, NumericVector prob) {
        typedef SEXP(*Ptr_dmultinom)(SEXP,SEXP);
        static Ptr_dmultinom p_dmultinom = NULL;
        if (p_dmultinom == NULL) {
            validateSignature("double(*dmultinom)(NumericVector,NumericVector)");
            p_dmultinom = (Ptr_dmultinom)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_dmultinom");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dmultinom(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(prob)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline double dDirichletMultinom(NumericVector x, NumericVector prob, double alpha) {
        typedef SEXP(*Ptr_dDirichletMultinom)(SEXP,SEXP,SEXP);
        static Ptr_dDirichletMultinom p_dDirichletMultinom = NULL;
        if (p_dDirichletMultinom == NULL) {
            validateSignature("double(*dDirichletMultinom)(NumericVector,NumericVector,double)");
            p_dDirichletMultinom = (Ptr_dDirichletMultinom)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_dDirichletMultinom");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_dDirichletMultinom(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(prob)), Shield<SEXP>(Rcpp::wrap(alpha)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline int nGen(int ploidy, int nalleles) {
        typedef SEXP(*Ptr_nGen)(SEXP,SEXP);
        static Ptr_nGen p_nGen = NULL;
        if (p_nGen == NULL) {
            validateSignature("int(*nGen)(int,int)");
            p_nGen = (Ptr_nGen)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_nGen");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_nGen(Shield<SEXP>(Rcpp::wrap(ploidy)), Shield<SEXP>(Rcpp::wrap(nalleles)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline IntegerMatrix enumerateGenotypes(int ploidy, int nalleles) {
        typedef SEXP(*Ptr_enumerateGenotypes)(SEXP,SEXP);
        static Ptr_enumerateGenotypes p_enumerateGenotypes = NULL;
        if (p_enumerateGenotypes == NULL) {
            validateSignature("IntegerMatrix(*enumerateGenotypes)(int,int)");
            p_enumerateGenotypes = (Ptr_enumerateGenotypes)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_enumerateGenotypes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_enumerateGenotypes(Shield<SEXP>(Rcpp::wrap(ploidy)), Shield<SEXP>(Rcpp::wrap(nalleles)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerMatrix >(rcpp_result_gen);
    }

    inline int indexGenotype(IntegerVector genotype) {
        typedef SEXP(*Ptr_indexGenotype)(SEXP);
        static Ptr_indexGenotype p_indexGenotype = NULL;
        if (p_indexGenotype == NULL) {
            validateSignature("int(*indexGenotype)(IntegerVector)");
            p_indexGenotype = (Ptr_indexGenotype)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_indexGenotype");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_indexGenotype(Shield<SEXP>(Rcpp::wrap(genotype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<int >(rcpp_result_gen);
    }

    inline IntegerVector genotypeFromIndex(int index, int ploidy) {
        typedef SEXP(*Ptr_genotypeFromIndex)(SEXP,SEXP);
        static Ptr_genotypeFromIndex p_genotypeFromIndex = NULL;
        if (p_genotypeFromIndex == NULL) {
            validateSignature("IntegerVector(*genotypeFromIndex)(int,int)");
            p_genotypeFromIndex = (Ptr_genotypeFromIndex)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_genotypeFromIndex");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_genotypeFromIndex(Shield<SEXP>(Rcpp::wrap(index)), Shield<SEXP>(Rcpp::wrap(ploidy)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerVector alleleCopy(IntegerVector genotype, int nalleles) {
        typedef SEXP(*Ptr_alleleCopy)(SEXP,SEXP);
        static Ptr_alleleCopy p_alleleCopy = NULL;
        if (p_alleleCopy == NULL) {
            validateSignature("IntegerVector(*alleleCopy)(IntegerVector,int)");
            p_alleleCopy = (Ptr_alleleCopy)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_alleleCopy");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_alleleCopy(Shield<SEXP>(Rcpp::wrap(genotype)), Shield<SEXP>(Rcpp::wrap(nalleles)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerVector >(rcpp_result_gen);
    }

    inline IntegerMatrix makeGametes(IntegerVector genotype) {
        typedef SEXP(*Ptr_makeGametes)(SEXP);
        static Ptr_makeGametes p_makeGametes = NULL;
        if (p_makeGametes == NULL) {
            validateSignature("IntegerMatrix(*makeGametes)(IntegerVector)");
            p_makeGametes = (Ptr_makeGametes)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_makeGametes");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_makeGametes(Shield<SEXP>(Rcpp::wrap(genotype)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<IntegerMatrix >(rcpp_result_gen);
    }

    inline NumericMatrix selfingMatrix(int ploidy, int nalleles) {
        typedef SEXP(*Ptr_selfingMatrix)(SEXP,SEXP);
        static Ptr_selfingMatrix p_selfingMatrix = NULL;
        if (p_selfingMatrix == NULL) {
            validateSignature("NumericMatrix(*selfingMatrix)(int,int)");
            p_selfingMatrix = (Ptr_selfingMatrix)R_GetCCallable("ploidyverseVcf", "_ploidyverseVcf_selfingMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_selfingMatrix(Shield<SEXP>(Rcpp::wrap(ploidy)), Shield<SEXP>(Rcpp::wrap(nalleles)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<NumericMatrix >(rcpp_result_gen);
    }

}

#endif // RCPP_ploidyverseVcf_RCPPEXPORTS_H_GEN_
